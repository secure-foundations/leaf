From lrust.typing Require Export type.
From lrust.typing Require Import uniq_array_util typing.
From lrust.typing.lib Require Import vec.vec slice.slice.
Set Default Proof Using "Type".

Implicit Type ùîÑ ùîÖ: syn_type.

Section vec_slice.
  Context `{!typeG Œ£}.

  Definition vec_as_slice: val :=
    fn: ["bv"] :=
      let: "v" := !"bv" in delete [ #1; "bv"];;
      let: "r" := new [ #2] in
      "r" <- !"v";; "r" +‚Çó #1 <- !("v" +‚Çó #1);;
      return: ["r"].

  (* Rust's Vec::as_slice *)
  Lemma vec_as_shr_slice_type {ùîÑ} (ty: type ùîÑ) :
    typed_val vec_as_slice (fn<Œ±>(‚àÖ; &shr{Œ±} (vec_ty ty)) ‚Üí shr_slice Œ± ty)
      (Œª post '-[al], post al).
  Proof.
    eapply type_fn; [apply _|]=>/= Œ± ??[bv[]]. simpl_subst.
    iIntros (?(vœÄ &[])?) "#LFT #TIME #PROPH #UNIQ E Na L C /=[bv _] #Obs".
    rewrite tctx_hasty_val. iDestruct "bv" as ([|d]) "[‚ßñ box]"=>//.
    case bv as [[|bv|]|]=>//=. rewrite split_mt_ptr.
    case d as [|d]; [by iDestruct "box" as "[>[] _]"|]=>/=.
    iDestruct "box" as "[(%& ‚Ü¶ & big) ‚Ä†]". wp_read. wp_let.
    case d as [|d]; [done|]. iDestruct "big" as (????->) "[Bor tys]".
    rewrite freeable_sz_full -heap_mapsto_vec_singleton.
    wp_apply (wp_delete with "[$‚Ü¶ $‚Ä†]"); [done|]. iIntros "_". wp_seq.
    wp_apply wp_new; [done..|]. iIntros (?) "[‚Ä†r ‚Ü¶r]". wp_let.
    iMod (lctx_lft_alive_tok Œ± with "E L") as (?) "(Œ± & L & ToL)"; [solve_typing..|].
    iMod (frac_bor_acc with "LFT Bor Œ±") as (?) "[>‚Ü¶ Cls]"; [done|].
    rewrite !heap_mapsto_vec_cons !heap_mapsto_vec_nil.
    iDestruct "‚Ü¶" as "(‚Ü¶‚ÇÄ & ‚Ü¶‚ÇÅ & ‚Ü¶‚ÇÇ &_)". iDestruct "‚Ü¶r" as "(‚Ü¶r & ‚Ü¶r' &_)".
    wp_read. wp_write. do 2 wp_op. wp_read. wp_write. do 2 wp_seq.
    iMod ("Cls" with "[$‚Ü¶‚ÇÄ $‚Ü¶‚ÇÅ $‚Ü¶‚ÇÇ]") as "Œ±".
    iMod ("ToL" with "Œ± L") as "L". rewrite cctx_interp_singleton.
    iApply ("C" $! [# #_] -[_] with "Na L [-] Obs"). iSplit; [|done].
    rewrite tctx_hasty_val. iExists (S _). rewrite/= split_mt_shr_slice.
    rewrite freeable_sz_full. iFrame "‚ßñ ‚Ä†r". iNext. iExists _, _, _.
    iSplit; [done|]. iFrame "‚Ü¶r ‚Ü¶r'". iClear "#". iStopProof.
    do 3 f_equiv. apply ty_shr_depth_mono. lia.
  Qed.

  (* Rust's Vec::as_mut_slice *)
  Lemma vec_as_uniq_slice_type {ùîÑ} (ty: type ùîÑ) :
    typed_val vec_as_slice (fn<Œ±>(‚àÖ; &uniq{Œ±} (vec_ty ty)) ‚Üí uniq_slice Œ± ty)
      (Œª post '-[(al, al')], length al' = length al ‚Üí post (zip al al')).
  Proof.
    eapply type_fn; [apply _|]=>/= Œ± ??[bv[]]. simpl_subst.
    iIntros (?(vœÄ &[])?) "#LFT #TIME #PROPH UNIQ E Na L C /=[bv _] Obs".
    rewrite tctx_hasty_val. iDestruct "bv" as ([|]) "[_ box]"=>//.
    case bv as [[|bv|]|]=>//=. rewrite split_mt_uniq_bor.
    iDestruct "box" as "[(#In &%&%& %Œæi &>[% %Eq2]& ‚Ü¶bv & Vo & Bor) ‚Ä†bv]".
    wp_read. wp_seq. rewrite freeable_sz_full -heap_mapsto_vec_singleton.
    wp_apply (wp_delete with "[$‚Ü¶bv $‚Ä†bv]"); [done|]. iIntros "_".
    iMod (lctx_lft_alive_tok Œ± with "E L") as (?) "(Œ± & L & ToL)"; [solve_typing..|].
    iMod (bor_acc_cons with "LFT Bor Œ±") as "[big ToBor]"; [done|]. wp_seq.
    iDestruct "big" as (? d') "(#‚ßñ & Pc & big)". rewrite split_mt_vec.
    case d'=>// ?. iDestruct "big" as (??? aœÄl ->) "(‚Ü¶ & ‚Ü¶tys & ex & ‚Ä†)".
    wp_bind (new _). iApply (wp_cumulative_time_receipt with "TIME"); [done|].
    iApply wp_new; [done..|]. iIntros "!>" (?) "[‚Ä†r ‚Ü¶r] ‚ßó". wp_let.
    set Œæ := PrVar _ Œæi. iDestruct (uniq_agree with "Vo Pc") as %[Eq1 ->].
    have ->: vœÄ = Œª œÄ, (lapply aœÄl œÄ, œÄ Œæ).
    { by rewrite [vœÄ]surjective_pairing_fun Eq1 Eq2. }
    rewrite !heap_mapsto_vec_cons. iDestruct "‚Ü¶" as "(‚Ü¶‚ÇÄ & ‚Ü¶‚ÇÅ & ‚Ü¶‚ÇÇ &_)".
    iDestruct "‚Ü¶r" as "(‚Ü¶r & ‚Ü¶r' &_)". wp_read. wp_write. do 2 wp_op. wp_read.
    wp_write. do 2 wp_seq.
    iMod (uniq_intro_vec aœÄl with "PROPH UNIQ") as (Œ∂il) "VoPcs"; [done|].
    iDestruct (uniq_proph_tok_vec with "VoPcs") as "[Œ∂l VoPcs]".
    set aœÄŒ∂il := vzip _ _. set Œ∂l := map _ aœÄŒ∂il.
    set aœÄl' := vmap (Œª aœÄŒ∂i (œÄ: proph_asn),
      œÄ (PrVar (ùîÑ ‚Üæ prval_to_inh aœÄŒ∂i.1) aœÄŒ∂i.2): ùîÑ) aœÄŒ∂il.
    set aaœÄl := vmap (Œª aœÄŒ∂i œÄ,
      (aœÄŒ∂i.1 œÄ, œÄ (PrVar (ùîÑ ‚Üæ prval_to_inh aœÄŒ∂i.1) aœÄŒ∂i.2): ùîÑ)) aœÄŒ∂il.
    iMod (uniq_preresolve Œæ Œ∂l (lapply aœÄl') with "PROPH Vo Pc Œ∂l")
      as "(Obs' & Œ∂l & ToPc)"; [done|..].
    { rewrite -vec_to_list_apply. apply proph_dep_constr, proph_dep_prvars. }
    iCombine "Obs' Obs" as "#?". iSpecialize ("VoPcs" with "Œ∂l").
    iDestruct (big_sepL_sep with "VoPcs") as "[Vos Pcs]".
    iMod ("ToBor" $! (big_sepL _ _) with "[‚ßó ‚Ü¶‚ÇÄ ‚Ü¶‚ÇÅ ‚Ü¶‚ÇÇ ex ‚Ä† ToPc] [‚Ü¶tys Pcs]")
      as "[Bor Œ±]"; last first.
    - iMod ("ToL" with "Œ± L") as "L". rewrite cctx_interp_singleton.
      iMod (bor_big_sepL with "LFT Bor") as "Bors"; [done|].
      iApply ("C" $! [# #_] -[lapply aaœÄl] with "Na L [-]").
      + rewrite/= right_id (tctx_hasty_val #_) -freeable_sz_full. iExists _.
        iFrame "‚ßñ ‚Ä†r". iNext. rewrite split_mt_uniq_slice. iFrame "In".
        iExists _, _, _, _. rewrite big_sepL_sep. by iFrame.
      + iApply proph_obs_impl; [|done]=>/= œÄ [-> Imp].
        have ->: lapply aaœÄl œÄ = zip (lapply aœÄl œÄ) (lapply aœÄl' œÄ).
        { clear. induction aœÄl; inv_vec Œ∂il=>//= *. by f_equal. }
        apply Imp. clear. induction aœÄl; inv_vec Œ∂il=>//= *. by f_equal.
    - iNext. iApply (merge_big_sepL_proph_ctrl_mt_ty_own with "[] Pcs ‚Ü¶tys").
      iApply persistent_time_receipt_mono; [|done]. lia.
    - iIntros "!> big".
      iDestruct (split_big_sepL_proph_ctrl_mt_ty_own with "PROPH ‚ßñ big") as "big".
      iMod (bi.later_exist_except_0 with "big") as (wœÄl ?) "(>‚ßñ' & Eqzs & ‚Ü¶tys)".
      iMod (cumulative_persistent_time_receipt with "TIME ‚ßó ‚ßñ'") as "‚ßñ'"; [solve_ndisj|].
      iIntros "!>!>". iExists (lapply wœÄl), _. iFrame "‚ßñ'". iSplitL "Eqzs ToPc".
      { iApply "ToPc". rewrite -!vec_to_list_apply.
        iApply proph_eqz_constr. iApply (proph_eqz_prvars with "Eqzs"). }
      rewrite split_mt_vec. iExists _, _, _, _.
      rewrite !heap_mapsto_vec_cons heap_mapsto_vec_nil. by iFrame.
  Qed.
End vec_slice.
