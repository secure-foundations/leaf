From lrust.typing Require Export type.
From lrust.typing Require Import array_util product.
Set Default Proof Using "Type".

Implicit Type ùîÑ ùîÖ ‚Ñ≠: syn_type.

Section array.
  Context `{!typeG Œ£}.

  Lemma split_mt_array {ùîÑ n} (ty: type ùîÑ) l (aœÄl: _ n) d tid :
    (l ‚Ü¶‚àó: Œª vl, ‚àÉwll: vec _ _, ‚åúvl = concat wll‚åù ‚àó
      [‚àó list] aœÄwl ‚àà vzip aœÄl wll, ty.(ty_own) aœÄwl.1 d tid aœÄwl.2) ‚ä£‚ä¢
    [‚àó list] i ‚Ü¶ aœÄ ‚àà aœÄl, (l +‚Çó[ty] i) ‚Ü¶‚àó: ty.(ty_own) aœÄ d tid.
  Proof.
    rewrite trans_big_sepL_mt_ty_own. iSplit.
    - iIntros "(%&?&%&->&?)". iExists _. iFrame.
    - iIntros "(%& ‚Ü¶ &?)". iExists _. iFrame "‚Ü¶". iExists _. by iFrame.
  Qed.

  Program Definition array {ùîÑ} n (ty: type ùîÑ) : type (vec‚Çõ ùîÑ n) := {|
    ty_size := n * ty.(ty_size);  ty_lfts := ty.(ty_lfts);  ty_E := ty.(ty_E);
    ty_own vœÄ d tid vl := ‚àÉwll: vec _ _, ‚åúvl = concat wll‚åù ‚àó
      [‚àó list] aœÄwl ‚àà vzip (vfunsep vœÄ) wll, ty.(ty_own) aœÄwl.1 d tid aœÄwl.2;
    ty_shr vœÄ d Œ∫ tid l :=
      [‚àó list] i ‚Ü¶ aœÄ ‚àà vfunsep vœÄ, ty.(ty_shr) aœÄ d Œ∫ tid (l +‚Çó[ty] i);
  |}%I.
  Next Obligation.
    iIntros "* (%&->& tys)". by iApply (big_sepL_ty_own_length with "tys").
  Qed.
  Next Obligation. move=>/= *. do 6 f_equiv. by apply ty_own_depth_mono. Qed.
  Next Obligation. move=>/= *. do 3 f_equiv. by apply ty_shr_depth_mono. Qed.
  Next Obligation.
    iIntros "* #In". rewrite !big_sepL_forall. iIntros "All" (???).
    iApply (ty_shr_lft_mono with "In"). by iApply "All".
  Qed.
  Next Obligation.
    iIntros "*% LFT In Bor Œ∫". rewrite split_mt_array.
    iMod (ty_share_big_sepL with "LFT In Bor Œ∫") as "Toshrs"; [done|].
    iApply (step_fupdN_wand with "Toshrs"). by iIntros "!> >[$$]".
  Qed.
  Next Obligation.
    iIntros (????????? q ?) "#LFT #In (%&->& tys) Œ∫".
    iMod (ty_own_proph_big_sepL with "LFT In tys Œ∫") as "Upd"; [done|].
    iApply (step_fupdN_wand with "Upd"). rewrite vapply_funsep.
    iIntros "!> >(%&%&%& Œæl & Totys) !>". iExists _, _. iSplit; [done|].
    iIntros "{$Œæl}Œæl". iMod ("Totys" with "Œæl") as "[? $]". iExists _. by iFrame.
  Qed.
  Next Obligation.
    iIntros "*% LFT In In' tys Œ∫'". rewrite -{2}[vœÄ]vapply_funsep.
    iMod (ty_shr_proph_big_sepL with "LFT In In' tys Œ∫'") as "Upd"; [done|].
    iIntros "!>!>". iApply (step_fupdN_wand with "Upd").
    iIntros ">(%&%&%& Œæl & Totys) !>". iExists _, _. iSplit; [done|].
    iIntros "{$Œæl}Œæl". by iMod ("Totys" with "Œæl") as "[$$]".
  Qed.

  Global Instance array_ne {ùîÑ} n : NonExpansive (@array ùîÑ n).
  Proof. solve_ne_type. Qed.
End array.

(* The notation in Rust is [ty; n], but it conflicts with lists in Coq *)
Notation "[ ty ;^ n ]" := (array n ty) (format "[ ty ;^  n ]") : lrust_type_scope.

Section typing.
  Context `{!typeG Œ£}.

  Global Instance array_type_ne {ùîÑ} n : TypeNonExpansive (@array _ _ ùîÑ n).
  Proof.
    split; [by apply type_lft_morphism_id_like|by move=>/= ??->| | ]=>/= > Sz *;
    [by do 6 f_equiv|rewrite Sz; by do 3 f_equiv].
  Qed.

  Global Instance array_copy {ùîÑ} n (ty: type ùîÑ) : Copy ty ‚Üí Copy [ty;^ n].
  Proof.
    split; [apply _|]=>/= vœÄ ???? F l q ? HF. iIntros "#LFT tys Na Œ∫".
    move: {vœÄ}(vfunsep (A:=ùîÑ) vœÄ)=> aœÄl.
    iInduction aœÄl as [|] "IH" forall (q l F HF)=>/=.
    { iModIntro. iExists 1%Qp, []. rewrite difference_empty_L heap_mapsto_vec_nil.
      iFrame "Na Œ∫". iSplitR; [by iExists [#]=>/=|]. by iIntros. }
    rewrite shift_loc_0. iDestruct "tys" as "[ty tys]". iDestruct "Œ∫" as "[Œ∫ Œ∫‚Çä]".
    iMod (copy_shr_acc with "LFT ty Na Œ∫") as (q' ?) "(Na & ‚Ü¶ & #ty & ToŒ∫)";
    [done| |]. { rewrite <-HF. apply shr_locsE_subseteq=>/=. lia. }
    setoid_rewrite <-shift_loc_assoc_nat.
    iMod ("IH" with "[%] tys Na Œ∫‚Çä") as (q'' ?) "(Na & ‚Ü¶' & (%&>->& #tys) & ToŒ∫‚Çä)".
    { apply subseteq_difference_r. { symmetry. apply shr_locsE_disj. }
      move: HF. rewrite -plus_assoc shr_locsE_shift. set_solver. }
    case (Qp_lower_bound q' q'')=> [q'''[?[?[->->]]]]. iExists q''', (_ ++ _).
    rewrite heap_mapsto_vec_app. iDestruct (ty_size_eq with "ty") as ">->".
    iDestruct "‚Ü¶" as "[$ ‚Ü¶r]". iDestruct "‚Ü¶'" as "[$ ‚Ü¶r']".
    iDestruct (na_own_acc with "Na") as "[$ ToNa]".
    { rewrite shr_locsE_shift. set_solver. }
    iSplitR.
    - iIntros "!>!>". iExists (_:::_)=>/=. iSplit; by [|iSplit].
    - iIntros "!> Na [‚Ü¶ ‚Ü¶']". iDestruct ("ToNa" with "Na") as "Na".
      iMod ("ToŒ∫‚Çä" with "Na [$‚Ü¶' $‚Ü¶r']") as "[Na $]". iApply ("ToŒ∫" with "Na"). iFrame.
  Qed.

  Global Instance array_send {ùîÑ} n (ty: type ùîÑ) : Send ty ‚Üí Send [ty;^ n].
  Proof. move=> >/=. by do 6 f_equiv. Qed.
  Global Instance array_sync {ùîÑ} n (ty: type ùîÑ) : Sync ty ‚Üí Sync [ty;^ n].
  Proof. move=> >/=. by do 3 f_equiv. Qed.

  Lemma array_resolve {ùîÑ} (ty: type ùîÑ) n Œ¶ E L :
    resolve E L ty Œ¶ ‚Üí resolve E L [ty;^ n] (Œª al, lforall Œ¶ al).
  Proof.
    iIntros "% * LFT PROPH E L (%&->& tys)".
    iMod (resolve_big_sepL_ty_own with "LFT PROPH E L tys"); [done..|].
    by rewrite -vec_to_list_apply vapply_funsep.
  Qed.

  Lemma array_resolve_just {ùîÑ} (ty: type ùîÑ) n E L :
    resolve E L ty (const True) ‚Üí resolve E L [ty;^ n] (const True).
  Proof. move=> ?. apply resolve_just. Qed.

  Lemma array_real {ùîÑ ùîÖ} (ty: type ùîÑ) n (f: ùîÑ ‚Üí ùîÖ) E L :
    real E L ty f ‚Üí real (ùîÖ:=vec‚Çõ _ _) E L [ty;^ n] (vmap f).
  Proof.
    move=> Rl. split.
    - iIntros "*% LFT E L (%&->& tys)".
      iMod (real_big_sepL_ty_own with "LFT E L tys") as "Upd"; [done..|].
      iApply (step_fupdN_wand with "Upd"). rewrite vapply_funsep.
      iIntros "!> >($&$&?) !>". iExists _. by iFrame.
    - iIntros "*% LFT E L tys".
      iMod (real_big_sepL_ty_shr with "LFT E L tys") as "Upd"; [done..|].
      iIntros "!>!>". iApply (step_fupdN_wand with "Upd").
      rewrite vapply_funsep. by iIntros ">($&$&$) !>".
  Qed.

  Lemma array_subtype {ùîÑ ùîÖ} E L n (f: ùîÑ ‚Üí ùîÖ) ty ty' :
    subtype E L ty ty' f ‚Üí subtype E L [ty;^ n] [ty';^ n] (vmap f).
  Proof.
    iIntros (Sub ?) "L". iDestruct (Sub with "L") as "#Sub".
    iIntros "!> E". iDestruct ("Sub" with "E") as "(%Sz &?&#?&#?)".
    iSplit; [by rewrite/= Sz|]. iSplit; [done|].
    have Eq: ‚àÄvœÄ, vfunsep (vmap f ‚àò vœÄ) = vmap (f ‚àò.) (vfunsep vœÄ).
    { move=> ?? vœÄ. rewrite -{1}[vœÄ]vapply_funsep.
      move: {vœÄ}(vfunsep vœÄ)=> aœÄl. by elim aœÄl; [done|]=>/= ???<-. }
    iSplit; iIntros "!> */="; rewrite Eq.
    - iIntros "(%&->&?)". iExists _. iSplit; [done|]. by iApply incl_big_sepL_ty_own.
    - iIntros "?". by iApply incl_big_sepL_ty_shr.
  Qed.
  Lemma array_eqtype {ùîÑ ùîÖ} (f: ùîÑ ‚Üí ùîÖ) g ty ty' n E L :
    eqtype E L ty ty' f g ‚Üí eqtype E L [ty;^ n] [ty';^ n] (vmap f) (vmap g).
  Proof. move=> [??]. split; by apply array_subtype. Qed.

  Lemma array_one {ùîÑ} (ty: type ùîÑ) E L : eqtype E L [ty;^ 1] ty vhd (Œª x, [#x]).
  Proof.
    apply eqtype_unfold; [apply _|]. iIntros "% _!>_".
    iSplit; [by rewrite/= Nat.add_0_r|]. iSplit; [iApply lft_equiv_refl|].
    have Eq: ‚àÄvœÄ, vhd ‚àò vœÄ = vhd (vfunsep vœÄ). { move=> ??? vœÄ.
    rewrite -{1}[vœÄ]vapply_funsep. move: (vfunsep vœÄ)=> aœÄl. by inv_vec aœÄl. }
    iSplit; iIntros "!> %vœÄ */="; rewrite Eq;
    move: {vœÄ}(vfunsep (A:=ùîÑ) vœÄ)=> aœÄl; inv_vec aœÄl=> ?; [iSplit|].
    - iIntros "(%wll &->&?)". inv_vec wll=>/= ?. by do 2 rewrite right_id.
    - iIntros "?". iExists [# _]=>/=. do 2 rewrite right_id. by iSplit.
    - rewrite right_id shift_loc_0. by iApply bi.equiv_iff.
  Qed.

  Lemma array_plus_prod {ùîÑ} m n (ty: type ùîÑ) E L :
    eqtype E L [ty;^ m + n] ([ty;^ m] * [ty;^ n]) (vsepat m) (uncurry vapp).
  Proof.
    apply eqtype_symm, eqtype_unfold; [apply _|]. iIntros (?) "_!>_".
    iSplit; [iPureIntro=>/=; lia|]. iSplit.
    { rewrite/= lft_intersect_list_app. iApply lft_intersect_equiv_idemp. }
    have Eq: ‚àÄvœÄ: proph (vec ùîÑ _ * _), vfunsep (uncurry vapp ‚àò vœÄ) =
      vfunsep (fst ‚àò vœÄ) +++ vfunsep (snd ‚àò vœÄ).
    { move=> ?? vœÄ. have {1}<-: pair ‚àò vapply (vfunsep $ fst ‚àò vœÄ) ‚äõ
      vapply (vfunsep $ snd ‚àò vœÄ) = vœÄ by rewrite !semi_iso' -surjective_pairing_fun.
      move: (_ $ fst ‚àò _)=> aœÄl. by elim aœÄl; [by rewrite semi_iso'|]=>/= ???<-. }
    iSplit; iIntros "!> %vœÄ %/="; rewrite Eq; move: (vfunsep (fst ‚àò vœÄ))=> aœÄl;
    move: {vœÄ}(vfunsep (snd ‚àò vœÄ))=> bœÄl; iIntros "*"; [iSplit|].
    - iIntros "(%&%&->&(%&->&?)&(%&->&?))". iExists (_+++_).
      rewrite vzip_with_app !vec_to_list_app concat_app. by iFrame.
    - iIntros "(%wll &->& tys)". move: (vapp_ex wll)=> [?[?->]].
      rewrite vzip_with_app !vec_to_list_app concat_app. iExists _, _. iSplit; [done|].
      iDestruct "tys" as "[tys tys']". iSplitL "tys"; iExists _; by iFrame.
    - iApply bi.equiv_iff.
      rewrite vec_to_list_app big_sepL_app vec_to_list_length. do 5 f_equiv.
      by rewrite shift_loc_assoc_nat -Nat.mul_add_distr_r.
  Qed.

  Lemma array_succ_prod {ùîÑ} n (ty: type ùîÑ) E L :
    eqtype E L [ty;^ S n] (ty * [ty;^ n]) (Œª v, (vhd v, vtl v)) (uncurry (Œª x, vcons x)).
  Proof.
    eapply eqtype_eq.
    - eapply eqtype_trans; [apply (array_plus_prod 1)|].
      apply prod_eqtype; [apply array_one|solve_typing].
    - done.
    - fun_ext. by case.
  Qed.
End typing.

Global Hint Resolve array_resolve | 5 : lrust_typing.
Global Hint Resolve array_resolve_just array_real array_subtype array_eqtype
  : lrust_typing.
